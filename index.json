[{"categories":null,"content":"Under Construction PICTURES Photography. POSTS Posts. ","date":"0001-01-01","objectID":"/categories/:0:0","tags":null,"title":"Documentation","uri":"/categories/"},{"categories":null,"content":"biography.","date":"2020-06-23","objectID":"/biography/","tags":null,"title":"Biography","uri":"/biography/"},{"categories":null,"content":"Affiliation Computer Engineering Student. Dept. Electronics and Computer Engineering,. Pulchowk Campus Tribhuvan University, Nepal ","date":"2020-06-23","objectID":"/biography/:1:0","tags":null,"title":"Biography","uri":"/biography/"},{"categories":null,"content":"Interests Data Manupulation (Machine Learning) Computer Simulations Software Engineering (C++, Python) Photography ","date":"2020-06-23","objectID":"/biography/:2:0","tags":null,"title":"Biography","uri":"/biography/"},{"categories":null,"content":"Technical Skills C++ Pyhton C Numpy/Tensorflow ","date":"2020-06-23","objectID":"/biography/:3:0","tags":null,"title":"Biography","uri":"/biography/"},{"categories":null,"content":"Publications see Publications. ","date":"2020-06-23","objectID":"/biography/:4:0","tags":null,"title":"Biography","uri":"/biography/"},{"categories":null,"content":"Educational/Work history 2019/08/01~ Pulchowk campus, Computer Engineering. 2017/04/01~ Kathmandu Bernhardt School, +2 level. 2007/03/01~ School Level. ","date":"2020-06-23","objectID":"/biography/:5:0","tags":null,"title":"Biography","uri":"/biography/"},{"categories":null,"content":"Courses GAN Specialization(Coursera). Deep Learning Specialization(Coursera). Deep Learning with Tensorflow (EDX) Machine Learning(Coursera). ","date":"2020-06-23","objectID":"/biography/:6:0","tags":null,"title":"Biography","uri":"/biography/"},{"categories":null,"content":"Other AI and Robotics Member - RAN. IRB Robotics Arm- LOCUS 2020. Joint Secretary - NTBNS. ","date":"2020-06-23","objectID":"/biography/:7:0","tags":null,"title":"Biography","uri":"/biography/"},{"categories":null,"content":"Find my CV \u003e HERE. Excuse me, but this, this is just a piece of paper, If I’m going to be worthy of this institution, I will show you in action. –\u003eTom and Jerry(Kayla) ","date":"2020-06-23","objectID":"/biography/:8:0","tags":null,"title":"Biography","uri":"/biography/"},{"categories":null,"content":"photography.","date":"2020-06-23","objectID":"/photography/","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":" PHOTO FROM MY LENS Flower and More ","date":"2020-06-23","objectID":"/photography/:0:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Sun Flower Gradient Life and Colour. ","date":"2020-06-23","objectID":"/photography/:1:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Madagascar Periwinkle Water and Flower. ","date":"2020-06-23","objectID":"/photography/:2:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Pointed Nose Math never satify to paint. ","date":"2020-06-23","objectID":"/photography/:3:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Red colour is my Passion. ","date":"2020-06-23","objectID":"/photography/:4:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower God is like you. ","date":"2020-06-23","objectID":"/photography/:5:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Sun and flower. ","date":"2020-06-23","objectID":"/photography/:6:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Frame and Sun. ","date":"2020-06-23","objectID":"/photography/:7:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Wild style. ","date":"2020-06-23","objectID":"/photography/:8:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Periwinkle. ","date":"2020-06-23","objectID":"/photography/:9:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Lord Hindu. ","date":"2020-06-23","objectID":"/photography/:10:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Focus to Friend. ","date":"2020-06-23","objectID":"/photography/:11:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Little Flower. ","date":"2020-06-23","objectID":"/photography/:12:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Show white. ","date":"2020-06-23","objectID":"/photography/:13:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Morning Blow. ","date":"2020-06-23","objectID":"/photography/:14:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower For you. ","date":"2020-06-23","objectID":"/photography/:15:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Tiled Sun. ","date":"2020-06-23","objectID":"/photography/:16:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Moon and Colour. ","date":"2020-06-23","objectID":"/photography/:17:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Full moon in Red filter. ","date":"2020-06-23","objectID":"/photography/:18:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Random edit. ","date":"2020-06-23","objectID":"/photography/:19:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Painted Water. ","date":"2020-06-23","objectID":"/photography/:20:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Yellow Garden. ","date":"2020-06-23","objectID":"/photography/:21:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Medagascar. ","date":"2020-06-23","objectID":"/photography/:22:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Point Red. ","date":"2020-06-23","objectID":"/photography/:23:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower RED and WHITE. ","date":"2020-06-23","objectID":"/photography/:24:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower White flower. ","date":"2020-06-23","objectID":"/photography/:25:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower This photo is captured at janakpur. ","date":"2020-06-23","objectID":"/photography/:26:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower On your feet. ","date":"2020-06-23","objectID":"/photography/:27:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Hindu trilogy. ","date":"2020-06-23","objectID":"/photography/:28:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Path to Heaven. ","date":"2020-06-23","objectID":"/photography/:29:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Wild Morning. ","date":"2020-06-23","objectID":"/photography/:30:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Snow flower. ","date":"2020-06-23","objectID":"/photography/:31:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Colour more. ","date":"2020-06-23","objectID":"/photography/:32:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Red Flower Scattered Flower. ","date":"2020-06-23","objectID":"/photography/:33:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Mustard Flower Yellow Family ","date":"2020-06-23","objectID":"/photography/:34:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"MariGold Red and Green ","date":"2020-06-23","objectID":"/photography/:35:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"White Flower Dusty Background ","date":"2020-06-23","objectID":"/photography/:36:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Morning Girl WET!! ","date":"2020-06-23","objectID":"/photography/:37:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Pink Flower Same as ME ","date":"2020-06-23","objectID":"/photography/:38:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Leaves and Flower Green and Red ","date":"2020-06-23","objectID":"/photography/:39:0","tags":null,"title":"Photography","uri":"/photography/"},{"categories":null,"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it.","date":"2021-07-22","objectID":"/julia_set_fractal/","tags":null,"title":"Julia_Set_Fractal","uri":"/julia_set_fractal/"},{"categories":null,"content":"Julia SetMandelbrot \" Julia Set The Julia set is named after the French mathematician Gaston Julia who investigated their properties circa 1915 and culminated in his famous paper in 1918. While the Julia set is now associated with a simpler polynomial, Julia was interested in the iterative properties of a more general expression, namely z4 + z3/(z-1) + z2/(z3 + 4 z2 + 5) + c. The Julia set is now associated with those points z = x + iy on the complex plane for which the series zn+1 = zn2 + c does not tend to infinity. c is a complex constant, one gets a different Julia set for each c. The initial value z0 for the series is each point in the image plane. In the broader sense the exact form of the iterated function may be anything, the general form being zn+1 = f(zn), interesting sets arise with non-linear functions f(z). Commonly used functions include the following: $$z(n+1) = c sin(zn) zn+1 = c exp(zn) $$zn+1 = c i cos(zn) zn+1 = c zn (1 - zn) Computing a Julia set by computer is straightforward, at least by the brute force method presented here. The image is created by mapping each pixel to a rectangular region of the complex plane. Each pixel then represents the starting point for the series, z0. The series is computed for each pixel and if it diverges to infinity it is drawn in white, if it doesn’t then it is drawn black. This convergence or otherwise isn’t always obvious and it may take a large number of iterations to resolve so a decision procedure is required to determine divergence. This typically involves assuming the series tends to infinity as soon as its value exceeds some value, if the series hasn’t diverged after a certain number of terms it is similarly assigned to be part of the set. Both these decisions can be varied to give more precise images but ones that take longer to calculate. An added effect is achieved by colouring the point by how fast it diverges to infinity. The well known Mandelbrot set forms a kind of index into the Julia set. A Julia set is either connected or disconnected, values of c chosen from within the Mandelbrot set are connected while those from the outside of the Mandelbrot set are disconnected. The disconnected sets are often called “dust”, they consist of individual points no matter what resolution they are viewed at.Above Mentioned Line are taken from This website. ","date":"2021-07-22","objectID":"/julia_set_fractal/:0:0","tags":null,"title":"Julia_Set_Fractal","uri":"/julia_set_fractal/"},{"categories":null,"content":"CODE import numpy as np import matplotlib.pyplot as plt import matplotlib.cm as cm # Image width and height; parameters for the plot im_width, im_height = 5000, 5000 rel = float(input(\"enter the real part\")) img = float(input(\"enter the img part\")) c = complex(rel, img) zabs_max = 10 nit_max = 1000 xmin, xmax = -1.5, 1.5 xwidth = xmax - xmin ymin, ymax = -1.5, 1.5 yheight = ymax - ymin julia = np.zeros((im_width, im_height)) for ix in range(im_width): for iy in range(im_height): nit = 0 # Map pixel position to a point in the complex plane z = complex(ix / im_width * xwidth + xmin, iy / im_height * yheight + ymin) # Do the iterations while abs(z) \u003c= zabs_max and nit \u003c nit_max: z = z**2 + c nit += 1 shade = 1-np.sqrt(nit / nit_max) ratio = nit / nit_max julia[ix,iy] = ratio enter the real part-0.54 enter the img part0.54 ","date":"2021-07-22","objectID":"/julia_set_fractal/:1:0","tags":null,"title":"Julia_Set_Fractal","uri":"/julia_set_fractal/"},{"categories":null,"content":"IMAGES ","date":"2021-07-22","objectID":"/julia_set_fractal/:2:0","tags":null,"title":"Julia_Set_Fractal","uri":"/julia_set_fractal/"},{"categories":null,"content":"IMAGE 1 fig, ax = plt.subplots(figsize=(50,50)) ax.imshow(julia, interpolation='nearest', cmap=cm.hot) plt.show() ","date":"2021-07-22","objectID":"/julia_set_fractal/:2:1","tags":null,"title":"Julia_Set_Fractal","uri":"/julia_set_fractal/"},{"categories":null,"content":"IMAGE 2 fig, ax = plt.subplots(figsize=(50,50)) ax.imshow(julia, interpolation='nearest', cmap=cm.hot) plt.show() ","date":"2021-07-22","objectID":"/julia_set_fractal/:2:2","tags":null,"title":"Julia_Set_Fractal","uri":"/julia_set_fractal/"},{"categories":null,"content":"IMAGE 3 fig, ax = plt.subplots(figsize=(50,50)) ax.imshow(julia, interpolation='nearest', cmap=cm.hot) plt.show() ","date":"2021-07-22","objectID":"/julia_set_fractal/:2:3","tags":null,"title":"Julia_Set_Fractal","uri":"/julia_set_fractal/"},{"categories":null,"content":"IMAGE 4 fig, ax = plt.subplots(figsize=(50,50)) ax.imshow(julia, interpolation='nearest', cmap=cm.hot) plt.show() ","date":"2021-07-22","objectID":"/julia_set_fractal/:2:4","tags":null,"title":"Julia_Set_Fractal","uri":"/julia_set_fractal/"},{"categories":null,"content":"IMAGE 5 fig, ax = plt.subplots(figsize=(50,50)) ax.imshow(julia, interpolation='nearest', cmap=cm.hot) plt.show() ","date":"2021-07-22","objectID":"/julia_set_fractal/:2:5","tags":null,"title":"Julia_Set_Fractal","uri":"/julia_set_fractal/"},{"categories":null,"content":"AUTO ENCODER In this notebook you will find how auto encoder are trained in tensorflow(Keras). This notebook have two different type of encoder i.e normal * Auto Encoder * and * Denoising Auto Encoder * . ","date":"2021-07-19","objectID":"/autoencoder/:0:0","tags":null,"title":"AutoEncoder","uri":"/autoencoder/"},{"categories":null,"content":"Normal Encoder LIBRARY ARE LOADED %matplotlib inline %config InlineBackend.figure_format = 'retina' import matplotlib.pyplot as plt import pandas as pd import numpy as np import seaborn as sns import warnings warnings.filterwarnings('ignore') #from __future__ import print_function from keras.models import Model from keras.layers import Dense, Input from keras.datasets import mnist from keras.regularizers import l1 from keras.optimizers import Adam FOR PLOTING OUTPUTS def plot_autoencoder_outputs(autoencoder, n, dims): decoded_imgs = autoencoder.predict(x_test) # number of example digits to show n = 5 plt.figure(figsize=(10, 4.5)) for i in range(n): # plot original image ax = plt.subplot(2, n, i + 1) plt.imshow(x_test[i].reshape(*dims)) plt.gray() ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) if i == n/2: ax.set_title('Original Images') # plot reconstruction ax = plt.subplot(2, n, i + 1 + n) plt.imshow(decoded_imgs[i].reshape(*dims)) plt.gray() ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) if i == n/2: ax.set_title('Reconstructed Images') plt.show() TRAIN TEST SPLITS (x_train, y_train), (x_test, y_test) = mnist.load_data() x_train = x_train.astype('float32') / 255.0 x_test = x_test.astype('float32') / 255.0 RESIZED FOR PROCESSING x_train = x_train.reshape((len(x_train), np.prod(x_train.shape[1:]))) x_test = x_test.reshape((len(x_test), np.prod(x_test.shape[1:]))) print(x_train.shape) print(x_test.shape) (60000, 784) (10000, 784) MODEL CREATION input_size = 784 hidden_size = 128 code_size = 32 input_img = Input(shape=(input_size,)) hidden_1 = Dense(hidden_size, activation='relu')(input_img) code = Dense(code_size, activation='relu')(hidden_1) hidden_2 = Dense(hidden_size, activation='relu')(code) output_img = Dense(input_size, activation='sigmoid')(hidden_2) autoencoder = Model(input_img, output_img) autoencoder.compile(optimizer='adam', loss='binary_crossentropy') autoencoder.fit(x_train, x_train, epochs=3) Epoch 1/3 1875/1875 [==============================] - 29s 2ms/step - loss: 0.1880 Epoch 2/3 1875/1875 [==============================] - 5s 3ms/step - loss: 0.1003 Epoch 3/3 1875/1875 [==============================] - 4s 2ms/step - loss: 0.0950 \u003ckeras.callbacks.History at 0x7fc58b7709d0\u003e MODEL SUMMARY(ARC.) autoencoder.summary() Model: \"model\" _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_1 (InputLayer) [(None, 784)] 0 _________________________________________________________________ dense (Dense) (None, 128) 100480 _________________________________________________________________ dense_1 (Dense) (None, 32) 4128 _________________________________________________________________ dense_2 (Dense) (None, 128) 4224 _________________________________________________________________ dense_3 (Dense) (None, 784) 101136 ================================================================= Total params: 209,968 Trainable params: 209,968 Non-trainable params: 0 _________________________________________________________________ MODEL OUTPUT plot_autoencoder_outputs(autoencoder, 5, (28, 28)) MODEL TEST l=np.zeros((28,12)) m=np.ones((28,4))*0.8 r=np.zeros((28,12)) I=np.concatenate((l,m,r),axis=1).reshape(1,784) plt.imshow(I.reshape(28,28)) L= autoencoder.predict(I) print(L.shape) plt.figure(figsize=(8, 8)) plt.imshow(L.reshape(28,28)) (1, 784) \u003cmatplotlib.image.AxesImage at 0x7fc57026c700\u003e MODEL WEIGHTS VISUALIZATION weights = autoencoder.get_weights()[0].T n = 10 plt.figure(figsize=(20, 5)) for i in range(n): ax = plt.subplot(1, n, i + 1) plt.imshow(weights[i+0].reshape(28, 28)) ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) ","date":"2021-07-19","objectID":"/autoencoder/:1:0","tags":null,"title":"AutoEncoder","uri":"/autoencoder/"},{"categories":null,"content":"DENOISING AUTO ENCODER DATA CREATION noise_factor = 0.4 x_train_noisy = x_train + noise_factor * np.random.normal(size=x_train.shape) x_test_noisy = x_test + noise_factor * np.random.normal(size=x_test.shape) x_train_noisy = np.clip(x_train_noisy, 0.0, 1.0) x_test_noisy = np.clip(x_test_noisy, 0.0, 1.0) n = 5 plt.figure(figsize=(10, 4.5)) for i in range(n): # plot original image ax = plt.subplot(2, n, i + 1) plt.imshow(x_test[i].reshape(28, 28)) plt.gray() ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) if i == n/2: ax.set_title('Original Images') # plot noisy image ax = plt.subplot(2, n, i + 1 + n) plt.imshow(x_test_noisy[i].reshape(28, 28)) plt.gray() ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) if i == n/2: ax.set_title('Noisy Input') MODEL input_size = 784 hidden_size = 128 code_size = 32 input_img = Input(shape=(input_size,)) hidden_1 = Dense(hidden_size, activation='relu')(input_img) code = Dense(code_size, activation='relu')(hidden_1) hidden_2 = Dense(hidden_size, activation='relu')(code) output_img = Dense(input_size, activation='sigmoid')(hidden_2) autoencoder = Model(input_img, output_img) autoencoder.compile(optimizer='adam', loss='binary_crossentropy') autoencoder.fit(x_train_noisy, x_train, epochs=10) Epoch 1/10 1875/1875 [==============================] - 7s 2ms/step - loss: 0.2093 Epoch 2/10 1875/1875 [==============================] - 3s 2ms/step - loss: 0.1309 Epoch 3/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.1219 Epoch 4/10 1875/1875 [==============================] - 3s 2ms/step - loss: 0.1181 Epoch 5/10 1875/1875 [==============================] - 3s 2ms/step - loss: 0.1161 Epoch 6/10 1875/1875 [==============================] - 5s 2ms/step - loss: 0.1143 Epoch 7/10 1875/1875 [==============================] - 5s 2ms/step - loss: 0.1132 Epoch 8/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.1124 Epoch 9/10 1875/1875 [==============================] - 3s 2ms/step - loss: 0.1115 Epoch 10/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.1113 \u003ckeras.callbacks.History at 0x7fc570466790\u003e PLOTING DATA n = 5 plt.figure(figsize=(10, 7)) images = autoencoder.predict(x_test_noisy) for i in range(n): # plot original image ax = plt.subplot(3, n, i + 1) plt.imshow(x_test[i].reshape(28, 28)) plt.gray() ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) if i == n/2: ax.set_title('Original Images') # plot noisy image ax = plt.subplot(3, n, i + 1 + n) plt.imshow(x_test_noisy[i].reshape(28, 28)) plt.gray() ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) if i == n/2: ax.set_title('Noisy Input') # plot noisy image ax = plt.subplot(3, n, i + 1 + 2*n) plt.imshow(images[i].reshape(28, 28)) plt.gray() ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) if i == n/2: ax.set_title('Autoencoder Output') WEIGHT VISUALIZATION weights = autoencoder.get_weights()[0].T n = 10 plt.figure(figsize=(20, 5)) for i in range(n): ax = plt.subplot(1, n, i + 1) plt.imshow(weights[i+0].reshape(28, 28)) ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) THANKS ","date":"2021-07-19","objectID":"/autoencoder/:2:0","tags":null,"title":"AutoEncoder","uri":"/autoencoder/"},{"categories":null,"content":"Math and Python","date":"2021-07-10","objectID":"/simplemath/","tags":null,"title":"Simple Math","uri":"/simplemath/"},{"categories":null,"content":" NUMPY AND PYTHON DERIVATIVE OF polynomial function import numpy as np def basis_function(x): a=np.eye(x) b=np.zeros((x,1)) c=np. concatenate((b,a),axis=1) d=np.array(range(1,x+1)).reshape(x,1) e=c *d return e enter coeff.of equation in given pattern :- constant,x,x^2,x^3,…. #ENTER HERE [\\\\\\\\\\\\\\\\\\\\\\\\\\] d=np.array([34,90,34,90]) #NUMBER MUST BE SEPERATED BY COMMA d print(f'your equation is {d[0]}+{d[1]}x +{d[2]}x^2-----') #TO FIND LENGTH e=len(d) y=e-1 #RESHAPE d=d.reshape(e,1) #CALLING BASIS FUNCTION f=basis_function(y) #FINDING DERIVATIVE g=f@d #PRINTING OUT print(f'your derivative coeff. in order of constant,x,x^2,x^3,.... term is:- {g.reshape(1,-1)} ') Result your equation is 90+90x +90x^2—– your derivative coeff. in order of constant,x,x^2,x^3,…. term is:- [[ 90. 180. 270.]] ","date":"2021-07-10","objectID":"/simplemath/:0:0","tags":null,"title":"Simple Math","uri":"/simplemath/"},{"categories":null,"content":"Generative Model","date":"2021-07-09","objectID":"/supervised/","tags":null,"title":"Unsupervised","uri":"/supervised/"},{"categories":null,"content":" VAE VAE TYPES ","date":"2021-07-09","objectID":"/supervised/:0:0","tags":null,"title":"Unsupervised","uri":"/supervised/"},{"categories":null,"content":"Auto Encoder This is like a simple generative algorithm in which one model is used to reduce the data like simple compression and other is for increasing data like decompressor. This model contain different neural network model for both of task. Here there is difficult to develop or generate determined image from compressed laten space. ","date":"2021-07-09","objectID":"/supervised/:1:0","tags":null,"title":"Unsupervised","uri":"/supervised/"},{"categories":null,"content":"Variational Autoencoders Up to now, we have discussed dimensionality reduction problem and introduce autoencoders that are encoder-decoder architectures that can be trained by gradient descent. Let’s now make the link with the content generation problem, see the limitations of autoencoders in their current form for this problem and introduce Variational Autoencoders. Limitations of autoencoders for content generation * At this point, a natural question that comes in mind is “what is the link between autoencoders and content generation?”. Indeed, once the autoencoder has been trained, we have both an encoder and a decoder but still no real way to produce any new content. At first sight, we could be tempted to think that, if the latent space is regular enough (well “organized” by the encoder during the training process), we could take a point randomly from that latent space and decode it to get a new content. The decoder would then act more or less like the generator of a Generative Adversarial Network. How data is generated in VAE. autoencoder vs VAEAuto Encoder vs VAE \" autoencoder vs VAE LOSS FOR VAE WITH REGULARISATIONLOSS FUNCTION \" LOSS FOR VAE WITH REGULARISATION GAN GAN TYPES ","date":"2021-07-09","objectID":"/supervised/:2:0","tags":null,"title":"Unsupervised","uri":"/supervised/"},{"categories":null,"content":"Machine Learning Model for Classification","date":"2021-06-21","objectID":"/first_post/","tags":null,"title":"Nepali_Devanagari_Letter_Classifier","uri":"/first_post/"},{"categories":null,"content":"In the search of deep data analytic we comes to deep machine learnig which is most famous way of finding pattern in data and predicting the future state of data pattern. In this python based machine learning code i have written a convolution based deep learnig code of predicting and recogination of number,letter and and many more. In this code i have used tranfer learning way of predicting number and letter in real time by using c++ based one of the famous visual modulus callled Open CV. Our model are quit good in recorgining letter and number. I have trained my program in my local data set i.e devanagari data set. You can find all code in my github ","date":"2021-06-21","objectID":"/first_post/:0:0","tags":null,"title":"Nepali_Devanagari_Letter_Classifier","uri":"/first_post/"},{"categories":null,"content":"Story of NBoy","date":"2021-06-21","objectID":"/second_post/","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"Hi! In this post i will put some quotes and some historic line which defined me and suggest me what to do in that very critical stage. ","date":"2021-06-21","objectID":"/second_post/:0:0","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"From my Twitter ","date":"2021-06-21","objectID":"/second_post/:1:0","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"Tomorrow seems more shorter than today. — Sumit Yadav (@Rocker_Ritesh) June 25, 2021 ","date":"2021-06-21","objectID":"/second_post/:1:1","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"This unexpected wind started extinguishing my heart in my dream too. #ThoughtForTheDay pic.twitter.com/L7lnZgkCi4 — Sumit Yadav (@Rocker_Ritesh) June 7, 2021 ","date":"2021-06-21","objectID":"/second_post/:1:2","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"\"No waking age\" — Sumit Yadav (@Rocker_Ritesh) May 29, 2021 ","date":"2021-06-21","objectID":"/second_post/:1:3","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"Centuries will remember your infidelity! — Sumit Yadav (@Rocker_Ritesh) May 25, 2021 ","date":"2021-06-21","objectID":"/second_post/:1:4","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"Be a general in Love, not an Ordinary. #love — Sumit Yadav (@Rocker_Ritesh) May 20, 2021 ","date":"2021-06-21","objectID":"/second_post/:1:5","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"You are the best version of yourself who can perfectly describe you! pic.twitter.com/zfzTS13Mfk — Sumit Yadav (@Rocker_Ritesh) May 14, 2021 ","date":"2021-06-21","objectID":"/second_post/:1:6","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"Sun set is not end, It's start of new Hope.#janakimandir #eveningview pic.twitter.com/z64qAOfAps — Sumit Yadav (@Rocker_Ritesh) April 24, 2021 ","date":"2021-06-21","objectID":"/second_post/:1:7","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"In the search of success I forget to sacrify. pic.twitter.com/9rQ58sLwX5 — Sumit Yadav (@Rocker_Ritesh) April 19, 2021 ","date":"2021-06-21","objectID":"/second_post/:1:8","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"\"No waking age\" — Sumit Yadav (@Rocker_Ritesh) May 29, 2021 ","date":"2021-06-21","objectID":"/second_post/:1:9","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"I am Black not Dark, U may be White but not Bright.#racism #motivate pic.twitter.com/Y7oWnOX8n6 — Sumit Yadav (@Rocker_Ritesh) April 15, 2021 ","date":"2021-06-21","objectID":"/second_post/:1:10","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"From Holy Book ","date":"2021-06-21","objectID":"/second_post/:2:0","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"},{"categories":null,"content":"\u003e ","date":"2021-06-21","objectID":"/second_post/:2:1","tags":null,"title":"Sentence That Define Me","uri":"/second_post/"}]